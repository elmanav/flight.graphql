schema {
  query: Query
}

type Query {
  flights(where: LiveFlightFilterInput): [LiveFlight!]!
  flight(number: String!): LiveFlight!
  cactus1549: LiveFlight!
}

type Aircraft {
  id: Int!
  regNumber: String!
  iCAOCode: String!
}

type Airport {
  id: Int!
  name: String!
  iata: String!
  country: String!
}

type LiveFlight {
  id: Int!
  number: String!
  from: String!
  to: String!
  airline: String!
  aircraft: String!
  AircraftInfo: Aircraft
  FromAirport: Airport
  ToAirport: Airport
  AirlineInfo: Airline
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input LiveFlightFilterInput {
  and: [LiveFlightFilterInput!]
  or: [LiveFlightFilterInput!]
  id: ComparableInt32OperationFilterInput
  number: StringOperationFilterInput
  from: StringOperationFilterInput
  to: StringOperationFilterInput
  airline: StringOperationFilterInput
  aircraft: StringOperationFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

type Airline {
  id: Int!
  name: String!
  icao: String!
}

"The name scalar represents a valid GraphQL name as specified in the spec and can be used to refer to fields or types."
scalar Name

"Delegates a resolver to a remote schema."
directive @delegate("The path to the field on the remote schema." path: String "The name of the schema to which this field shall be delegated to." schema: Name!) on FIELD_DEFINITION

directive @computed("Specifies the fields on which a computed field is dependent on." dependantOn: [Name!]) on FIELD_DEFINITION

"Annotates the original name of a type."
directive @source("The original name of the annotated type." name: Name! "The name of the schema to which this type belongs to." schema: Name!) repeatable on ENUM | OBJECT | INTERFACE | UNION | INPUT_OBJECT | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE